name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Setup .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # Step 3: Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Step 4: Build the project
    - name: Build project
      run: dotnet publish -c Release -o ./publish

    # Step 5: Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-app
        path: ./publish

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'

    steps:
    # Step 6: Checkout the code (optional if needed for context)
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 7: Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: published-app
        path: ./publish

    # Step 8: Setup SSH and whitelist EC2 IP
    - name: Setup SSH key and whitelist EC2 IP
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Step 9: Deploy to EC2
    - name: Copy files to EC2
      run: |
        scp -i ~/.ssh/id_rsa -r ./publish/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/myapp

    - name: Restart the application
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo systemctl restart myapp.service"

    # Step 10: Clean up SSH keys
    - name: Clean up SSH key
      if: always()
      run: rm -f ~/.ssh/id_rsa
