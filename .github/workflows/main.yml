name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Setup .NET environment
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x' # Specify the .NET version

    # Step 3: Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Step 4: Build the project
    - name: Build project
      run: dotnet publish -c Release -o ./publish

    # Step 5: Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-app
        path: ./publish

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 6: Checkout the code again (for context in the deploy job)
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 7: Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: published-app
        path: ./artifact  # Change the path to a separate directory

    # Step 8: Deploy to EC2
    - name: Deploy to EC2
      env:
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        # Save the private key to a file
        echo "$EC2_PRIVATE_KEY" > githubActionsKP
        chmod 600 githubActionsKP

        # Add the EC2 instance's SSH host key to known_hosts to prevent "Host key verification failed"
        mkdir -p ~/.ssh
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

        # Copy the files to the EC2 instance
        scp -i githubActionsKP -r ./artifact/publish/* $EC2_USER@$EC2_HOST:/var/www/myapp

        # Optional: Restart the service on the EC2 instance
        ssh -i githubActionsKP $EC2_USER@$EC2_HOST "sudo systemctl restart myapp.service"
